%YAML 1.2

---

name: Som
file_extensions: [som]
fileTypes: [som]
scope: source.som

variables:
  lname: '\b_*[a-z][A-Za-z_0-9]*\b'
  uname: '\b_*[A-Z][A-Za-z_0-9]*\b'
  pname: \'{{lname}}(?!\')

  # numbers
  decimal: '\b[0-9]+(?:\.[0-9]+)?\b'
  binary: '\b0b[0-1]+\b'
  octal: '\b0c[0-7]+\b'
  hexadecimal: '\b0x[0-9a-fA-F]+\b'
  number: '{{decimal}}|{{binary}}|{{octal}}|{{hexadecimal}}'

  # basic types
  inttype: i\.(s|u)\.[0-9]+
  floattype: f\.(64|32|16)
  voidtype: v
  basictype: \$(?:{{inttype}}|{{floattype}}|{{voidtype}})

  escape_seq: a|b|f|n|r|t|v|\\|\'|\"|0

  # directives
  directive: '{{lname}}'

contexts:
  prototype:
    #
    - include: comments

  main:
    # The main context is the initial starting point of our syntax.
    # Include other contexts from here (or specify them directly).
    - include: comment
    - include: directive
    - include: section
    - include: import
    - include: typedef
    - include: type
    - include: declaration
    - include: definition
    - include: expression
    - include: invalid

  type:
    - match: \:(?!:)
      scope: punctuation.separator.som
      push:
        - include: type
        - match: (?=\S)
          pop: true

    # basic types
    - match: '_|{{basictype}}|{{uname}}|{{pname}}|\.\.\.'
      scope: storage.type.som
      push:
        - match: ->
          scope: keyword.other.arrow.som
        - match: ;(?!;)
          scope: punctuation.separator.sequence.som

        - match: (?=\S)
          pop: true

  finish_tuple_type:
    - match: \(
      scope: punctuation.section.parens.begin.som
      push:
      - meta_scope: meta.tuple-type.som
      - include: type
      - match: \)
        scope: punctuation.section.parens.end.som
        pop: open_parens

      - match: \S
        fail: open_parens

  # STATEMENTS

  directive:
    - match: (\!\!\.?)({{directive}})?
      scope: meta.directive.som
      captures:
        1: punctuation.definition.annotation.som
        2: variable.annotation.som

  section:
    - match: ({{lname}})\s*(\{)
      captures:
        1: entity.name.namespace.som
        2: punctuation.section.braces.begin.som
      push:
        - match: \}
          scope: punctuation.section.braces.end.som
          pop: true
        - include: main

  import:
    - match: \#\s*(?={{lname}}|{{uname}})
      scope: keyword.import.som
      push: import_finish

  import_finish:
    - meta_scope: meta.import.som

    - match: (?<=::)\*
      scope: keyword.other.glob.som
      pop: true

    # normal path segment, might be last
    - match: '{{lname}}'
      scope: entity.name.namespace.som
      set:
        - match: (=>)\s*({{lname}})
          captures:
            1: keyword.operator.as.som
            2: entity.name.namespace.som
          pop: true

        - match: '::|\/'
          scope: punctuation.accessor.som
          set: import_finish

        - match: (?=\S)
          pop: true

    # uppername, is last
    - match: '{{uname}}'
      scope: storage.type.som
      pop: true

    # start of block which cannot be
    # followed by another segment
    - match: \{
      scope: punctuation.section.braces.begin.som
      set:
        - match: \,
          scope: punctuation.separator.sequence.som

        - match: \}
          scope: punctuation.section.braces.end.som
          pop: true

        # we need to push recursively bc `set` is used
        - match: (?=\S)
          push: import_finish

    - include: invalid

  typedef:
    - match: ({{pname}}\s*)*({{uname}})\s*(=)
      captures:
        1: variable.parameter.type.som
        2: name.type.som
        3: keyword.operator.typedef.som
      push:
        - include: typedef_record
        - include: typedef_enum

        - include: typedef_variant
        # - include: typedef_variant_aux

        - match: (?=\S)
          pop: true

  typedef_record:
    - match: \{
      scope: punctuation.section.braces.begin.som
      push:
        - meta_scope: meta.record-type.som

        - match: '({{lname}})\s*(:)'
          captures:
            1: name.field.som
            2: punctuation.separator.som

        - include: type

        - match: \}
          scope: punctuation.section.braces.end.som
          pop: true

        - include: invalid

  typedef_enum:
    - match: \[
      scope: punctuation.section.brackets.begin.som
      push:
        - meta_scope: meta.enum-type.som

        - match: '{{lname}}'
          scope: entity.name.constant.som

        - match: =
          scope: keyword.operator.assignment.som

        - include: expression

        - match: \]
          scope: punctuation.section.brackets.end.som
          pop: true

        - include: invalid

  typedef_variant:
    - match: \|
      scope: punctuation.separator.variant-definition.som
      set:
        - match: '{{uname}}'
          scope: entity.name.type.variant.som
          set:
            - meta_scope: meta.variant-type.som

            - match: ':'
              scope: punctuation.separator.constructor-type.som

            - include: typedef_variant
            - include: type

            - match: (?=\S)
              pop: true

  # typedef_variant_aux:
    # - match: ({{lname}})(?!\s*::)
    #   scope: entity.name.type.variant
    #   set:
    #     - include: typedef_variant
    #     - include: type
    #     - match: (?=\S)
    #       pop: true

  # declaration:
    # - match: ({{lname}})\s*(\[)(?=.*\]\s*:(?!:))
    #   captures:
    #     1: entity.name.function.som
    #     2: punctuation.section.brackets.begin.som

    #   embed: generic_embedded
    #   escape: (\])\s*(:(?!:))?
    #   escape_captures:
    #     1: punctuation.section.brackets.end.som
    #     2: punctuation.separator.som

    # - match: ({{lname}})\s*(:(?!:))
      # captures:
      #   1: entity.name.function.som
      #   2: punctuation.separator.som

  # definition:
    # - match: (@)
    #   scope: keyword.definition.som
    #   push:
    #     - include: pattern
    #     - include: type
    #     - match: (=)(\s*\.\.\.)?
    #       captures:
    #         1: keyword.operator.definition.som
    #         2: keyword.operator.extern.som
    #       pop: true

  generic_embedded:
    - include: type
    - match: \,
      scope: punctuation.separator.sequence.som

  # PATTERNS

  pattern:
    - match: '(?<=\@){{lname}}'
      scope: entity.name.function.som
    - match: '{{lname}}'
      scope: variable.parameter.som
    - match: _(?![A-za-z])
      scope: constant.language.wildcard.som

  # EXPRESSION

  expression:
    - include: comment

    - include: special
    - include: operator
    - include: lambda
    - include: grouping
    - include: subscript
    - include: array
    - include: record
    - include: number
    - include: variable
    - include: string-char

  operator:
    - match: \?\?
      scope: keyword.operator.conditional.switch.som
    - match: ->
      scope: keyword.operator.switch-arm.som

    - match: =>
      scope: keyword.operator.do.som

    - match: \?
      scope: keyword.operator.ternary.if.som
    - match: ':(?!:)'
      scope: keyword.operator.ternary.else.som

    # - match: ->
      # scope: keyword.operator.cast.som

    - match: <<|>>
      scope: keyword.operator.bitwise.shift.som
    - match: =|/=
      scope: keyword.operator.comparison.som
    - match: <=|>=|<|>
      scope: keyword.operator.relational.som
    - match: \!|&&|\|\||\^\^
      scope: keyword.operator.logical.som
    - match: \&|\^|\|
      scope: keyword.operator.bitwise.som
    - match: \*|/|-|\+|\%
      scope: keyword.operator.arithmetic.som
    - match: (?<!!)!(?!!)
      scope: keyword.operator.logical.som

    - match: \.\.
      scope: punctuation.definition.range.som
    - match: ->
      scope: punctuation.accessor.arrow.som
    - match: \,|;|\.
      scope: punctuation.separator.sequence.som

    - match: \~
      scope: keyword.operator.unary.som

  lambda:
    - match: \\
      scope: keyword.other.lambda.som
      push:
        - include: pattern
        - match: ->
          scope: keyword.operator.definition.som
          pop: true

  grouping:
    - match: \(
      scope: punctuation.section.parens.begin.som
      push:
        - meta_scope: meta.grouping.som
        - match: \)
          scope: punctuation.section.parens.end.som
          pop: true
        - include: type
        - include: expression
        - include: invalid

  subscript:
    - match: \[
      scope: punctuation.section.brackets.begin.som
      push:
        - include: expression
        - match: \]
          scope: punctuation.section.brackets.end.som
          pop: true
        - include: comments
        - include: invalids

  array:
    - match: \[
      scope: punctuation.section.brackets.begin.som
      push:
        - meta_scope: meta.array-elements.som
        - match: \]
          scope: punctuation.section.brackets.end.som
          pop: true
        - include: comment
        - include: expression
        - include: invalid

  # PRIMARIES

  number:
    - match: \b{{number}}\b
      scope: constant.numeric.som

  special:
    - match: \(\)
      scope: constant.language.null.som

  string-char:
    - match: '\"'
      push:
        - meta_scope: string.quoted.double
        - match: '\"'
          pop: true
        - include: escaped-char
        - include: format-specifier

    - match: \'[^\\]\'
      scope: string.quoted.single.som
    - match: \'(\\(?:{{escape_seq}}))\'
      captures:
        0: string.quoted.single.som
        1: constant.character.escape.som
    - match: \'(\\.)
      captures:
        0: string.quoted.single.som
        1: invalid.illegal.unknown-escape.som

  record:
    - match: \{
      scope: punctuation.section.braces.begin.som
      push:
        - meta_scope: meta.record-fields.som
        - match: \}
          scope: punctuation.section.braces.end.som
          pop: true
        - include: comment
        - include: expression
        - include: invalid

  variable:
    - match: ({{lname}})\s*(\:\:)
      captures:
        1: entity.name.namespace.som
        2: punctuation.accessor.double-colon.som

    # - match: ({{uname}})(\.)
    #   captures:
    #     1: entity.name.enum.som
    #     2: punctuation.accessor.dot.som

    # - match: (?<=\.)({{uname}})
      # scope: entity.name.constant.som

    - match: '{{lname}}''*'
      scope: variable.som

    - match: \`
      scope: keyword.operator.som

  # MISC

  invalid:
    - include: comment
    - match: \S
      scope: invalid.som

  comment:
    - match: '---'
      scope: punctuation.definition.comment.som
      push:
        - meta_include_prototype: false
        - meta_scope: comment.block.som
        - match: '---'
          pop: true

    - match: '--'
      scope: punctuation.definition.comment.som
      push:
        - meta_scope: comment.line.som
        - match: $\n?
          pop: true

  escaped-char:
    - match: \\(?:{{escape_seq}}|$)
      scope: constant.character.escape.som
    - match: \\.
      scope: invalid.illegal.unknown-escape.som

  format-specifier:
      - match: \%(d|s|f|c)
        scope: constant.other.placeholder.som