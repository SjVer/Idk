%YAML 1.2

---

name: Som
file_extensions: [som]
fileTypes: [som]
scope: source.som

variables:
  lname: '\b_*[a-z][a-zA-Z0-9_]*\b'
  uname: '\b_*[A-Z][a-zA-Z0-9_]*''*'
  pname: \'{{lname}}(?!\')
  lnamep: '{{lname}}''*'

  # numbers
  decimal: '\b[0-9]+(?:\.[0-9]+)?\b'
  binary: '\b0b[0-1]+\b'
  octal: '\b0c[0-7]+\b'
  hexadecimal: '\b0x[0-9a-fA-F]+\b'
  number: '{{decimal}}|{{binary}}|{{octal}}|{{hexadecimal}}'

  # basic types
  inttype: i\.((s|u)\.(s|[0-9]+)|\*)
  floattype: f\.(64|32|16|\*)
  voidtype: v
  basictype: \$(?:{{inttype}}|{{floattype}}|{{voidtype}})

  escape_seq: a|b|f|n|r|t|v|\\|\'|\"|0

  directive_prefix: \!\!\s*\.?\s*

contexts:
  prototype:
    - include: comment
    - include: directive

  main:
    - include: import
    - include: module
    - include: typedef
    - include: external
    - include: definition
    - include: expression
    - include: invalid

  # STATEMENTS

  import:
    - match: \buse\b
      scope: keyword.import.som
      push: import-normal
    - match: \bfrom\b
      scope: keyword.import.som
      push: import-from

  module:
    - match: \bmod\b
      scope: keyword.definition.namespace.som
      push:
        - match: '{{lname}}'
          scope: entity.name.namespace.som
          set:
            - match: \{
              scope: punctuation.section.braces.begin.som
              set:
                - match: \}
                  scope: punctuation.section.braces.end.som
                  pop: true
                - include: main

            - include: invalid
        - include: invalid

  typedef:
    - match: \btype\b
      scope: keyword.definition.type.som
      push:
        - match: '{{pname}}'
          scope: storage.type.typevar.som
        - match: '{{uname}}'
          scope: storage.type.som meta.symbol.type.som
          set:
            # alias
            - match: \bis\b
              scope: keyword.definition.type.alias.som
              set: type

            # complex
            - match: \bof\b
              scope: keyword.definition.type.complex.som
              set:
                # variant
                - match: (\|)?\s*(?={{uname}})
                  scope: punctuation.separator.sequence.som
                  set: finish-variant-type

                # record
                - match: (?={{lname}}\s*\:)
                  set: finish-record-type

                # enum
                - match: (?={{lname}})
                  set: finish-enum-type

                - include: invalid
            - include: invalid
        - include: invalid

  external:
    - match: \bext\b
      scope: keyword.declaration.function.som
      push:
        - match: ({{lname}})\s*(as)\b
          captures:
            1: constant.language.som
            2: keyword.declaration.function.som
          set:
            - match: ':'
              scope: punctuation.separator.annotation.som
              set: type
            - include: pattern

        - match: '{{lname}}'
          scope:
            meta.symbol.function.som
            constant.language.som
          set:
            - match: ':'
              scope: punctuation.separator.annotation.som
              set: type
            - include: invalid

        - include: invalid

  definition:
    - match: \blet\b
      scope: keyword.definition.function.som
      push:
        - match: ':'
          scope: punctuation.separator.annotation.som
          push: type
        - match: =
          scope: keyword.operator.assignment.som
          pop: true
        - include: pattern

  # IMPORTS

  import-path:
    - match: ({{lname}})\s*(::)
      captures:
        1: entity.name.namespace.som
        2: punctuation.accessor.double-colon.som

  import-normal:
    - include: import-path

    - match: ({{lnamep}})|({{uname}})
      captures:
        1: variable.som
        2: entity.name.type.som
      pop: true

    - include: invalid

  import-from:
    - include: import-path

    - match: ({{lnamep}})|({{uname}})
      captures:
        1: variable.som
        2: entity.name.type.som
      set:
        - match: \buse\b
          scope: keyword.import.som
          set: import-from-finish

        - include: invalid
    - include: invalid

  import-from-finish:
    - include: import-path

    - match: (?<=\buse\b)\s*\*
      scope: keyword.import.glob.som
      pop: true

    - match: ({{lnamep}})|({{uname}})
      captures:
        1: variable.som
        2: entity.name.type.som
      push:
        - match: \,
          scope: punctuation.separator.sequence.som
          pop: 1
        - match: (?=\S)
          pop: 2

    - include: invalid

  # TYPES

  optional-type:
    - match: (?=(?<!!)!(?!!)|\(|{{basictype}}|{{uname}}|{{pname}}|_)
      push: type

  type:
    - match: (?<!!)!(?!!)
      scope: storage.modifier.som

    - match: \(
      scope: punctuation.section.parens.begin.som
      set:
          # to allow `(A, B) C`
        - match: \,
          scope: punctuation.separator.sequence.som

        - match: \)
          scope: punctuation.section.parens.end.som
          set: finish-type

        - match: (?=\S)
          push: type

    - match: '{{basictype}}|{{uname}}|{{pname}}|_'
      scope: storage.type.som
      set: finish-type

    - include: invalid

  finish-type:
    - match: '{{basictype}}|{{uname}}|{{pname}}|_'
      scope: storage.type.som

    # function
    - match: ->
      scope: storage.modifier.function.som
      set: type

    # forall
    - match: \.
      scope: punctuation.separator.forall.som
      set: type

    # tuple
    - match: ;
      scope: punctuation.separator.sequence.som
      set: type

    - include: pop-otherwise

  finish-variant-type:
    # first optional '|' handled
    - match: '{{uname}}'
      scope: entity.name.type.variant.som
      set:
        - match: \|
          scope: punctuation.separator.sequence.som
          set: finish-variant-type

        - include: optional-type
        - include: pop-otherwise

    - include: invalid

  finish-record-type:
    - match: ({{lnamep}})\s*(?:(\:)|(\S))
      captures:
        1: variable.member.record.som
        2: punctuation.definition.member.som
        3: invalid.illegal.som
      set:
        - match: \,
          scope: punctuation.separator.sequence.som
          set: finish-record-type

        - include: optional-type
        - include: pop-otherwise

    - include: invalid

  finish-enum-type:
    - match: '{{lnamep}}'
      scope: variable.member.enum.som
      set:
        - match: =
          scope: keyword.operator.assignment.som
          push:
            - match: (?=\,)
              pop: true
            - include: expression
            - include: invalid

        - match: \,
          scope: punctuation.separator.sequence.som
          set: finish-enum-type

        - include: pop-otherwise

    - include: invalid

  # PATTERNS

  pattern:
    - match: '((?<=\blet\b)|(?<=\bas\b))\s*{{lnamep}}\s*(?=(:|=))'
      scope: entity.name.variable.som meta.symbol.variable.som
    - match: '((?<=\blet\b)|(?<=\bas\b))\s*{{lnamep}}'
      scope: entity.name.function.som meta.symbol.function.som

    - match: '{{lnamep}}'
      scope: variable.parameter.som

    - match: \b_\b
      scope: constant.language.wildcard.som

    - include: expression

  # EXPRESSION

  expression:
    - include: keyword
    - include: operator
    - include: lambda
    - include: grouping
    - include: record
    - include: literal
    - include: variable

  keyword:
    - match: \b(match)\b
      scope: keyword.control.switch.som
    - match: \b(if|then|else)\b
      scope: keyword.control.conditional.som
    - match: \b(while|for|do)\b
      scope: keyword.control.loop.som
    - match: \b(at|in)\b
      scope: keyword.other.som

    - match: \||switch
      scope: keyword.control.switch.som
      push:
        - match: (?=\b(if|then)\b)
          pop: true
        - include: pattern
        - include: expression
        - include: invalid

  operator:
    - match: <<|>>
      scope: keyword.operator.bitwise.shift.som
    - match: =|/=
      scope: keyword.operator.comparison.som
    - match: <=|>=|<|>
      scope: keyword.operator.relational.som
    - match: \&\&|\|\|
      scope: keyword.operator.logical.som
    - match: \*|/|-|\+|\%
      scope: keyword.operator.arithmetic.som

    - match: \.\.
      scope: keyword.operator.range.som
    - match: \,|;
      scope: punctuation.separator.sequence.som

    - match: \~|(?<!!)!(?!!)
      scope: keyword.operator.unary.som

  lambda:
    - match: \\
      scope: keyword.other.lambda.som
      push:
        - match: ->
          scope: keyword.operator.definition.som
          pop: true
        - include: pattern

  grouping:
    - match: \((?!\))
      scope: punctuation.section.parens.begin.som
      push:
        - match: \)
          scope: punctuation.section.parens.end.som
          pop: true
        - include: expression
        - include: invalid

    - match: \[
      scope: punctuation.section.brackets.begin.som
      push:
        - match: \]
          scope: punctuation.section.brackets.end.som
          pop: true
        - include: expression
        - include: invalid

  record:
    - match: \{
      scope: punctuation.section.braces.begin.som
      push:
        - match: '{{lnamep}}'
          scope: variable.member.enum.som
          push:
            - match: =
              scope: keyword.operator.assignment.som
              set:
                - match: \,|(?=\})
                  scope: punctuation.separator.sequence.som
                  pop: true

                - include: expression
                - include: invalid

        - match: \}
          scope: punctuation.section.braces.end.som
          pop: true
        - include: invalid

  literal:
    - match: \b{{number}}\b
      scope: constant.numeric.som
    - match: \(\)
      scope: constant.language.null.som

    # string
    - match: '\"'
      push:
        - meta_scope: string.quoted.double
        - match: '\"'
          pop: true
        - include: escaped-char
        - include: format-specifier

    # char
    - match: \'[^\\]\'
      scope: string.quoted.single.som
    - match: \'(\\(?:{{escape_seq}}))\'
      captures:
        0: string.quoted.single.som
        1: constant.character.escape.som
    - match: \'(\\.)
      captures:
        0: string.quoted.single.som
        1: invalid.illegal.unknown-escape.som

  variable:
    - match: ({{lname}})\s*(\:\:)
      captures:
        1: entity.name.namespace.som
        2: punctuation.accessor.double-colon.som

    - match: (\.)\s*({{lnamep}})
      captures:
        1: punctuation.accessor.dot.som
        2: variable.member.som

    - match: '{{lnamep}}'
      scope: variable.som

    - match: '{{uname}}'
      scope: entity.name.type.variant.som

    - match: \#\!{{lname}}
      scope: constant.language.builtin.som

  # DIRECTIVES

  directive:
    # normal directives
    - match: '{{directive_prefix}}{{lname}}'
      scope: support.function.som
      push:
        - match: (\.)\s*({{lname}})
          captures:
            1: punctuation.separator.sequence.som
            2: support.function.som

        - include: optional-type # workaround
        - include: pop-otherwise

  # MISC

  pop-otherwise:
    - match: (?=\S)
      pop: true

  invalid:
    - match: \S
      scope: invalid.som

  comment:
    - match: '---'
      scope: punctuation.definition.comment.som
      push:
        - meta_include_prototype: false
        - meta_scope: comment.block.som
        - match: '---'
          pop: true

    - match: '--'
      scope: punctuation.definition.comment.som
      push:
        - meta_scope: comment.line.som
        - match: $\n?
          pop: true

  escaped-char:
    - match: \\(?:{{escape_seq}}|$)
      scope: constant.character.escape.som
    - match: \\.
      scope: invalid.illegal.unknown-escape.som

  format-specifier:
      - match: \%(d|s|f|c)
        scope: constant.other.placeholder.som