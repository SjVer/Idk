---
name: Som
nameName: source.som
fileTypes: [som]

firstLineMatch: ^#!/.*\bsom\b

variables:
  ident: '[A-Za-z_][A-Za-z_0-9]*'

  # numbers
  decimal: '\b[0-9]+(?:\.[0-9]*)?\b'
  binary: '\b0b[0-1]+\b'
  octal: '\b0c[0-7]+\b'
  hexadecimal: '\b0x[0-9a-fA-F]+\b'
  number: '{{decimal}}|{{binary}}|{{octal}}|{{hexadecimal}}'

  # types
  inttype: i\.(?:s|u)\.[0-9]+
  floattype: f\.(?:64|32|16)
  voidtype: v
  type: '(?:{{inttype}}|{{floattype}}|{{voidtype}})\**'

patterns:
- include: '#comment'
- include: '#expression'
- include: '#invalid'

repository:

  # EXPRESSION

  expression:
    patterns:
    - include: '#comment'

    - include: '#special'
    - include: '#number'
    - include: '#string'

    - include: '#operator'
    - include: '#keyword'

  special:
    patterns:
    - match: true|false
      name: constant.language.boolean.som
    - match: \(\)
      name: constant.language.null.som

  number:
    match: \b{{number}}\b
    name: constant.numeric.som

  string:
    patterns:
    - name: string.quoted.double.som

      begin: '"'
      beginCaptures:
        '0': { name: punctuation.definition.string.begin.som }

      patterns:
      - include: '#string_escaped_char'
      - include: '#string_placeholder'

      end: '"'
      endCaptures:
        '0': { name: punctuation.definition.string.end.som }

    - name: string.quoted.single.som

      begin: "'"
      beginCaptures:
        '0': { name: punctuation.definition.string.begin.som }

      patterns:
      - include: '#string_escaped_char'

      end: "'"
      endCaptures:
        '0': { name: punctuation.definition.string.end.som }

  operator:
    patterns:
    # - match: ->
      # name: keyword.operator.cast.som
      # push: type
    - match: <<|>>
      name: keyword.operator.bitwise.shift.som
    - match: ==|/=
      name: keyword.operator.comparison.som
    - match: <=|>=|<>|<|>
      name: keyword.operator.relational.som
    - match: \!|&&|\|\||\^\^
      name: keyword.operator.logical.som
    - match: \&|\^|\|
      name: keyword.operator.bitwise.som
    - match: \*|/|-|\+|\%
      name: keyword.operator.arithmetic.som

    - match: \.\.
      name: punctuation.definition.range.som
    - match: \.
      name: punctuation.accessor.dot.som
    - match: \,
      name: punctuation.separator.sequence.som


  keyword:
    patterns:
    - match: \?\?
      name: keyword.control.conditional.switch.som
    - match: =>
      name: keyword.control.conditional.switch.som

    - match: =>
      name: keyword.control.loop.for.som

    - match: \?
      name: keyword.control.conditional.if.som
    - match: '(?<!:):(?!:)'
      name: keyword.control.conditional.else.som

  # MISC

  comment:
    patterns:
    - name: comment.block.som
      begin: '---'
      end: '---'

    - name: comment.line.som
      match: '--.*$'

  string_escaped_char:
    patterns:
    - name: constant.character.escape.som
      match: \\(a|b|e|f|n|r|t|v|\\|'|"|0)
    - name: invalid.illegal.unknown-escape.som
      match: \\.
      
  string_placeholder:
    patterns:
    - name: constant.other.placeholder.som
      match: |-
          (?x)%
            (\d+\$)?                                      # field (argument #)
            [#0\- +']*                                    # flags
            [,;:_]?                                       # separator character (AltiVec)
            ((-?\d+)|\*(-?\d+\$)?)?                       # minimum field width
            (\.((-?\d+)|\*(-?\d+\$)?)?)?                  # precision
            (hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)?          # length modifier
            (\[[^\]]+\]|[am]s|[diouxXDOUeEfFgGaACcSspn%]) # conversion type
        
    - name: invalid.illegal.placeholder.som
      match: (%)(?!"\s*(PRI|SCN))

  invalid:
    patterns:
    - match: '\s+'
    - name: invalid.illegal.som
      match: '\S'
