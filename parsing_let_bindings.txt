let f x y = ()

<def>
  pattern
    Ppat-var "f"
  expression ghost
    Pexp-fun
      pattern
        Ppat-var "x"
      expression ghost
        Pexp-fun
          pattern
            Ppat-var "y"
          expression
            Pexp-construct "()"







let f = fun x -> fun y -> ()

<def>
  pattern
    Ppat-var "f"
  expression
    Pexp-fun
      pattern
        Ppat-var "x"
      expression
        Pexp-fun
          pattern
            Ppat-var "y"
          expression
            Pexp-construct "()"









┊              let-binding
┊                ╱     ╲
┊              LET   let-binding-body
┊                        ╱      ╲
┊                     IDENT   strict-binding <──────────┐
┊                                   │                   │
┊                         1─────────┴──────────2        │
┊                        _│_                  _│_       │
┊                       ╱   ╲                ╱   ╲      │
┊  labeled-simple-pattern   fun-binding   EQUAL  expr   │
┊             │                 │                 │     │
┊       simple-pattern          │                ...    │
┊             │                 │                       │
┊           IDENT               └───────────────────────┘
┊ 
┊ 
┊ 
┊                           let-binding
┊ let f x y = ...             ├ LET
┊ ^^^                         │
┊                             └ let-binding-body
┊ let f x y = ...                 ├ IDENT
┊     ^                           │
┊                                 └ strict-binding 1
┊                                     ├ labeled-simple-pattern
┊                                     │   └ simple-pattern
┊ let f x y = ...                     │       └ IDENT
┊       ^                             │
┊                                     └ fun-binding
┊                                         └ strict-binding 1
┊                                             ├ labeled-simple-pattern
┊                                             │   └ simple-pattern
┊ let f x y = ...                             │       └ IDENT
┊         ^                                   │
┊                                             └ fun-binding
┊                                                 └ strict-binding 2
┊ let f x y = ...                                     ├ EQUAL
┊           ^                                         │
┊                                                     └ expr
┊ let f x y = ...                                         └ ...
┊             ^^^