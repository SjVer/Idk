program			: (application | declaration | definition)*

application		: "#" (IDENT ".")* IDENT
declaration		: struct_decl
				| enum_decl

struct_decl		: IDENT "{" parameters? "}"
enum_decl		: IDENT "[" variants? "]"

definition 		: func_def | var_def
func_def		: IDENT "(" parameters? ")" type? "=" expression
var_def			: IDENT type? "=" expression

expression		: (expression ",")? (definition | logical | basic_expr)

logical 		: switch
				| loop

switch 			: "??" basic_expr ("|" basic_expr "=>" basic_expr)+
loop			: basic_expr "=>" IDENT basic_expr

basic_expr		: conditional

conditional		: basic_expr "?" basic_expr (":" basic_expr)?
logical_or		: logical_xor ("||" logical_xor)*
logical_or		: logical_and ("^^" logical_and)*
logical_and		: bitwise_or ("&&" bitwise_or)*
bitwise_or		: bitwise_xor ("|" bitwise_xor)*
bitwise_xor		: bitwise_and ("^" bitwise_and)*
bitwise_and		: equality ("&" equality)*
equality		: comparison (("!=" | "==") comparison)*
comparison		: bitwise_shift ((">" | ">=" | "<" | "<=") bitwise_shift)*
bitwise_shift	: term (("<<" | ">>") term)*
term			: factor (("-" | "+") factor)*
factor			: cast (("/" | "*") cast)*
cast			: unary ("->" type)*
unary			: ("!" | "-" | "++" | "--") unary | subscript
subscript		: range ("[" expression "]")*
range			: call (".." call)?
call			: primary ( "(" arguments? ")" | "." IDENT )*
primary			: "true" | "false" | NUMBER | CHAR | STRING
				| "(" expression ")" | variable | null
				| list | tuple | struct

list			: "[" (expression ("," expression)*)? "]"
tuple			: "(" expression (";" expression)* ")"
struct			: IDENT "{" arguments? "}"
variable		: IDENT
null			: "()"

variants		: variant ("," variant)*
variant 		: IDENT | IDENT tuple_type | struct_decl
parameters		: IDENT type? ("," IDENT type?)*
arguments		: expression ("," expression)*

type 			: array_type
				| tuple_type
				| BASE_TYPE
array_type		: "[" type ";" NUMBER "]"
tuple_type		: "(" type (";" type)* ")"

				| BASE_TYPE

